// Token Metadata Enrichment Service
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

const fetch = require('node-fetch');

// –ö–µ—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const tokenMetadataCache = new Map();

// Jupiter Token List –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Solana
const JUPITER_TOKEN_LIST = 'https://token.jup.ag/strict';

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ Jupiter
let jupiterTokens = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ Jupiter
 */
async function initializeTokenMetadata() {
    try {
        console.log('ü™ô Loading Jupiter token list...');
        const response = await fetch(JUPITER_TOKEN_LIST);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        jupiterTokens = await response.json();
        
        if (!Array.isArray(jupiterTokens)) {
            throw new Error('Invalid token list format received');
        }
        
        console.log(`‚úÖ Loaded ${jupiterTokens.length} token metadata records`);
        return true;
    } catch (error) {
        console.error('‚ùå Failed to load Jupiter token list:', error.message);
        jupiterTokens = [];
        console.log('üîÑ Token metadata service will work with empty list (fallback to address-only mode)');
        return false;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É
 * @param {string} tokenMint - –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Solana
 * @returns {Object} Metadata –æ–±—ä–µ–∫—Ç
 */
function getTokenMetadata(tokenMint) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (tokenMetadataCache.has(tokenMint)) {
        return tokenMetadataCache.get(tokenMint);
    }

    // –ò—â–µ–º –≤ Jupiter Token List
    const token = jupiterTokens?.find(t => t.address === tokenMint);
    
    let metadata = {
        address: tokenMint,
        name: 'Unknown Token',
        symbol: tokenMint.slice(0, 4).toUpperCase() + '...',
        image: '/img/token-placeholder.png',
        decimals: 6,
        price: 0,
        priceChange: 0
    };

    if (token) {
        metadata = {
            address: token.address,
            name: token.name || token.symbol || 'Unknown Token',
            symbol: token.symbol || tokenMint.slice(0, 4).toUpperCase(),
            image: token.logoURI || '/img/token-placeholder.png',
            decimals: token.decimals || 6,
            price: 0,
            priceChange: 0,
            tags: token.tags || [],
            verified: token.verified || false
        };
    }

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    tokenMetadataCache.set(tokenMint, metadata);
    return metadata;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Jupiter API
 * @param {string} tokenMint - –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
 * @returns {Promise<number>} –¶–µ–Ω–∞ –≤ USD
 */
async function getTokenPrice(tokenMint) {
    try {
        const response = await fetch(`https://price.jup.ag/v4/price?ids=${tokenMint}`);
        const data = await response.json();
        return data.data?.[tokenMint]?.price || 0;
    } catch (error) {
        console.error(`‚ùå Failed to get price for ${tokenMint}:`, error);
        return 0;
    }
}

/**
 * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
 * @param {Array} transactions - –ú–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * @returns {Promise<Array>} –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
async function enrichTransactionData(transactions) {
    if (!transactions || !Array.isArray(transactions)) {
        return transactions;
    }

    const enrichedData = await Promise.all(
        transactions.map(async (tx) => {
            const tokenMetadata = getTokenMetadata(tx.token_mint);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            let tokenPrice = 0;
            if (tx.needs_price_lookup) {
                tokenPrice = await getTokenPrice(tx.token_mint);
            }

            return {
                ...tx,
                token_name: tokenMetadata.name,
                token_symbol: tokenMetadata.symbol,
                token_image: tokenMetadata.image,
                token_decimals: tokenMetadata.decimals,
                token_price: tokenPrice,
                token_verified: tokenMetadata.verified || false
            };
        })
    );

    return enrichedData;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} tokenMint 
 * @returns {string} –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
 */
function getTokenSymbol(tokenMint) {
    const metadata = getTokenMetadata(tokenMint);
    return metadata.symbol;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
 * @param {string} tokenMint 
 * @returns {string} –ò–º—è —Ç–æ–∫–µ–Ω–∞
 */
function getTokenName(tokenMint) {
    const metadata = getTokenMetadata(tokenMint);
    return metadata.name;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
 * @param {string} tokenMint 
 * @returns {string} URL –∞–≤–∞—Ç–∞—Ä–∫–∏
 */
function getTokenImage(tokenMint) {
    const metadata = getTokenMetadata(tokenMint);
    return metadata.image;
}

module.exports = {
    initializeTokenMetadata,
    getTokenMetadata,
    getTokenPrice,
    enrichTransactionData,
    getTokenSymbol,
    getTokenName,
    getTokenImage
};
