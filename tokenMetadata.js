// Token Metadata Enrichment Service
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

const fetch = require('node-fetch');
const axios = require('axios');
const { 
    getPumpTokenDetails, 
    getMultiplePumpTokens,
    isPumpFunToken 
} = require('./pumpfunRealAPI');

// –ö–µ—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const tokenMetadataCache = new Map();

// Jupiter Token List –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Solana
const JUPITER_TOKEN_LIST = 'https://token.jup.ag/strict';

// DexScreener API –¥–ª—è Pump.fun –∏ –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
const DEXSCREENER_API = 'https://api.dexscreener.com/latest/dex/tokens';

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ Jupiter
let jupiterTokens = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ Jupiter
 */
async function initializeTokenMetadata() {
    try {
        console.log('ü™ô Loading Jupiter token list...');
        const response = await fetch(JUPITER_TOKEN_LIST);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        jupiterTokens = await response.json();
        
        if (!Array.isArray(jupiterTokens)) {
            throw new Error('Invalid token list format received');
        }
        
        console.log(`‚úÖ Loaded ${jupiterTokens.length} token metadata records`);
        return true;
    } catch (error) {
        console.error('‚ùå Failed to load Jupiter token list:', error.message);
        jupiterTokens = [];
        console.log('üîÑ Token metadata service will work with empty list (fallback to address-only mode)');
        return false;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ –∏–∑ DexScreener (–¥–ª—è Pump.fun –∏ –º–æ–ª–æ–¥—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
 * @param {string} tokenMint 
 * @returns {Promise<Object|null>}
 */
async function fetchFromDexScreener(tokenMint) {
    try {
        const response = await axios.get(`${DEXSCREENER_API}/${tokenMint}`, {
            timeout: 5000
        });
        
        if (response.data && response.data.pairs && response.data.pairs.length > 0) {
            const pair = response.data.pairs[0];
            const token = pair.baseToken;
            
            return {
                address: token.address,
                name: token.name || 'Unknown Token',
                symbol: token.symbol || tokenMint.slice(0, 4).toUpperCase(),
                image: pair.info?.imageUrl || '/img/token-placeholder.png',
                decimals: 6,
                price: parseFloat(pair.priceUsd) || 0,
                priceChange: pair.priceChange?.h24 || 0,
                market_cap: parseFloat(pair.fdv) || 0,
                liquidity: parseFloat(pair.liquidity?.usd) || 0,
                volume24h: parseFloat(pair.volume?.h24) || 0,
                verified: false,
                source: 'dexscreener'
            };
        }
        
        return null;
    } catch (error) {
        // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–µ—à–∞)
 * @param {string} tokenMint - –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Solana
 * @returns {Object} Metadata –æ–±—ä–µ–∫—Ç
 */
function getTokenMetadata(tokenMint) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (tokenMetadataCache.has(tokenMint)) {
        return tokenMetadataCache.get(tokenMint);
    }

    // –ò—â–µ–º –≤ Jupiter Token List
    const token = jupiterTokens?.find(t => t.address === tokenMint);
    
    let metadata = {
        address: tokenMint,
        name: 'Unknown Token',
        symbol: tokenMint.slice(0, 4).toUpperCase() + '...',
        image: '/img/token-placeholder.png',
        decimals: 6,
        price: 0,
        priceChange: 0,
        market_cap: 0,
        source: 'fallback'
    };

    if (token) {
        metadata = {
            address: token.address,
            name: token.name || token.symbol || 'Unknown Token',
            symbol: token.symbol || tokenMint.slice(0, 4).toUpperCase(),
            image: token.logoURI || '/img/token-placeholder.png',
            decimals: token.decimals || 6,
            price: 0,
            priceChange: 0,
            market_cap: 0,
            tags: token.tags || [],
            verified: token.verified || false,
            source: 'jupiter'
        };
    }

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    tokenMetadataCache.set(tokenMint, metadata);
    return metadata;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ –∏–∑ Pump.fun API (–¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
 * @param {string} tokenMint 
 * @returns {Promise<Object|null>}
 */
async function fetchFromPumpFun(tokenMint) {
    try {
        const pumpData = await getPumpTokenDetails(tokenMint);
        if (pumpData) {
            return {
                address: pumpData.mint,
                name: pumpData.name || 'Unknown Token',
                symbol: pumpData.symbol || tokenMint.slice(0, 4).toUpperCase(),
                image: pumpData.image || '/img/token-placeholder.png',
                decimals: 6,
                price: pumpData.price || 0,
                priceChange: pumpData.price_change_24h || 0,
                market_cap: pumpData.market_cap || 0,
                volume24h: pumpData.volume_24h || 0,
                holders: pumpData.holders || 0,
                verified: false,
                source: 'pumpfun_direct',
                creator: pumpData.creator,
                created_timestamp: pumpData.created_timestamp,
                is_complete: pumpData.is_complete,
                is_raydium: pumpData.is_raydium
            };
        }
        return null;
    } catch (error) {
        // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Pump.fun + DexScreener)
 * @param {string} tokenMint 
 * @returns {Promise<Object>}
 */
async function getTokenMetadataAsync(tokenMint) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (tokenMetadataCache.has(tokenMint)) {
        const cached = tokenMetadataCache.get(tokenMint);
        // –ï—Å–ª–∏ —ç—Ç–æ fallback - –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ Pump.fun –∏–ª–∏ DexScreener
        if (cached.source !== 'fallback') {
            return cached;
        }
    }

    // 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Pump.fun API (–Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã)
    const pumpData = await fetchFromPumpFun(tokenMint);
    if (pumpData) {
        tokenMetadataCache.set(tokenMint, pumpData);
        return pumpData;
    }

    // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ Pump.fun - –ø—ã—Ç–∞–µ–º—Å—è DexScreener (DEX —Ç–æ–∫–µ–Ω—ã)
    const dexData = await fetchFromDexScreener(tokenMint);
    if (dexData) {
        tokenMetadataCache.set(tokenMint, dexData);
        return dexData;
    }

    // 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (Jupiter + fallback)
    return getTokenMetadata(tokenMint);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Jupiter API
 * @param {string} tokenMint - –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
 * @returns {Promise<number>} –¶–µ–Ω–∞ –≤ USD
 */
async function getTokenPrice(tokenMint) {
    try {
        const response = await fetch(`https://price.jup.ag/v4/price?ids=${tokenMint}`);
        const data = await response.json();
        return data.data?.[tokenMint]?.price || 0;
    } catch (error) {
        console.error(`‚ùå Failed to get price for ${tokenMint}:`, error);
        return 0;
    }
}

/**
 * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
 * @param {Array} transactions - –ú–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * @returns {Promise<Array>} –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
async function enrichTransactionData(transactions) {
    if (!transactions || !Array.isArray(transactions)) {
        return transactions;
    }

    const enrichedData = await Promise.all(
        transactions.map(async (tx) => {
            const tokenMetadata = getTokenMetadata(tx.token_mint);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            let tokenPrice = 0;
            if (tx.needs_price_lookup) {
                tokenPrice = await getTokenPrice(tx.token_mint);
            }

            return {
                ...tx,
                token_name: tokenMetadata.name,
                token_symbol: tokenMetadata.symbol,
                token_image: tokenMetadata.image,
                token_decimals: tokenMetadata.decimals,
                token_price: tokenPrice,
                token_verified: tokenMetadata.verified || false
            };
        })
    );

    return enrichedData;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} tokenMint 
 * @returns {string} –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
 */
function getTokenSymbol(tokenMint) {
    const metadata = getTokenMetadata(tokenMint);
    return metadata.symbol;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
 * @param {string} tokenMint 
 * @returns {string} –ò–º—è —Ç–æ–∫–µ–Ω–∞
 */
function getTokenName(tokenMint) {
    const metadata = getTokenMetadata(tokenMint);
    return metadata.name;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
 * @param {string} tokenMint 
 * @returns {string} URL –∞–≤–∞—Ç–∞—Ä–∫–∏
 */
function getTokenImage(tokenMint) {
    const metadata = getTokenMetadata(tokenMint);
    return metadata.image;
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
 * @param {Array<string>} tokenMints 
 * @returns {Promise<Map>}
 */
async function fetchMultipleTokenMetadata(tokenMints, pool = null) {
    const uniqueTokens = [...new Set(tokenMints)];
    const results = new Map();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
        let dbPool = pool;
        let shouldClosePool = false;
        
        if (!dbPool) {
            const { Pool } = require('pg');
            dbPool = new Pool({
                connectionString: process.env.DATABASE_URL,
                ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
            });
            shouldClosePool = true;
        }
        
        const cachedTokens = await getCachedTokens(uniqueTokens, dbPool);
        const uncachedTokens = uniqueTokens.filter(mint => !cachedTokens.has(mint));
        
        console.log(`‚úÖ Found ${cachedTokens.size} cached tokens, fetching ${uncachedTokens.length} new ones`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        cachedTokens.forEach((metadata, mint) => {
            results.set(mint, metadata);
        });
        
        if (uncachedTokens.length === 0) {
            if (shouldClosePool) await dbPool.end();
            return results;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        const newMetadata = await fetchNewTokenMetadata(uncachedTokens);
        
        // –ö—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        for (const [tokenMint, metadata] of newMetadata) {
            await cacheTokenMetadata(tokenMint, metadata, dbPool);
            results.set(tokenMint, metadata);
        }
        
        if (shouldClosePool) await dbPool.end();
        console.log(`‚úÖ Total metadata: ${results.size} tokens (${cachedTokens.size} cached, ${newMetadata.size} new)`);
        return results;
        
    } catch (error) {
        console.error('‚ùå Cache error, falling back to direct fetch:', error);
        return await fetchNewTokenMetadata(uniqueTokens);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ë–î
async function getCachedTokens(tokenMints, pool) {
    try {
        const result = await pool.query(
            'SELECT address, symbol, name, image, market_cap, price, source FROM tokens WHERE address = ANY($1)',
            [tokenMints]
        );
        
        const tokenMap = new Map();
        result.rows.forEach(row => {
            tokenMap.set(row.address, {
                address: row.address,
                symbol: row.symbol,
                name: row.name,
                image: row.image,
                market_cap: row.market_cap,
                price: row.price,
                source: row.source || 'fallback'
            });
        });
        
        return tokenMap;
    } catch (error) {
        console.error('‚ùå Token retrieval error:', error);
        return new Map();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î
async function cacheTokenMetadata(tokenMint, metadata, pool) {
    try {
        if (!pool) {
            console.log('‚ö†Ô∏è Database pool not available, skipping token cache');
            return;
        }
        
        await pool.query(
            `INSERT INTO tokens (address, symbol, name, image, market_cap, price, source, last_updated)
             VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
             ON CONFLICT (address) 
             DO UPDATE SET 
                 symbol = EXCLUDED.symbol,
                 name = EXCLUDED.name,
                 image = EXCLUDED.image,
                 market_cap = EXCLUDED.market_cap,
                 price = EXCLUDED.price,
                 source = EXCLUDED.source,
                 last_updated = NOW()`,
            [
                tokenMint,
                metadata.symbol,
                metadata.name,
                metadata.image,
                metadata.market_cap,
                metadata.price,
                metadata.source
            ]
        );
    } catch (error) {
        if (error.code === 'ENETUNREACH' || error.code === 'ECONNREFUSED') {
            console.log('‚ö†Ô∏è Database connection unavailable, token cache skipped');
        } else {
            console.error('‚ùå Token cache error:', error.message);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
async function fetchNewTokenMetadata(tokenMints) {
    const results = new Map();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ Pump.fun API (–±–∞—Ç—á–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
    try {
        console.log(`üî• Trying Pump.fun batch API for ${tokenMints.length} tokens...`);
        const pumpResults = await getMultiplePumpTokens(tokenMints);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ Pump.fun
        pumpResults.forEach(token => {
            const metadata = {
                address: token.mint,
                name: token.name || 'Unknown Token',
                symbol: token.symbol || token.mint.slice(0, 4).toUpperCase(),
                image: token.image || '/img/token-placeholder.png',
                decimals: 6,
                price: token.price || 0,
                priceChange: token.price_change_24h || 0,
                market_cap: token.market_cap || 0,
                volume24h: token.volume_24h || 0,
                holders: token.holders || 0,
                verified: false,
                source: 'pumpfun_batch',
                creator: token.creator,
                created_timestamp: token.created_timestamp,
                is_complete: token.is_complete,
                is_raydium: token.is_raydium
            };
            results.set(token.mint, metadata);
        });
        
        console.log(`‚úÖ Pump.fun batch: found ${pumpResults.length} tokens`);
    } catch (error) {
        console.log(`‚ö†Ô∏è Pump.fun batch failed: ${error.message}`);
    }
    
    // –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—à–ª–∏ –≤ Pump.fun - –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
    const notFoundTokens = tokenMints.filter(mint => !results.has(mint));
    
    if (notFoundTokens.length > 0) {
        console.log(`üîç Fetching individual metadata for ${notFoundTokens.length} remaining tokens...`);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±–∞—Ç—á–∞–º–∏ –ø–æ 10)
        const batchSize = 10;
        for (let i = 0; i < notFoundTokens.length; i += batchSize) {
            const batch = notFoundTokens.slice(i, i + batchSize);
            const batchResults = await Promise.all(
                batch.map(async (mint) => {
                    const metadata = await getTokenMetadataAsync(mint);
                    return [mint, metadata];
                })
            );
            batchResults.forEach(([mint, metadata]) => results.set(mint, metadata));
        }
    }
    
    return results;
}

module.exports = {
    initializeTokenMetadata,
    getTokenMetadata,
    getTokenMetadataAsync,
    getTokenPrice,
    enrichTransactionData,
    getTokenSymbol,
    getTokenName,
    getTokenImage,
    fetchMultipleTokenMetadata,
    fetchFromDexScreener
};
