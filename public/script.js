// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BACKEND_URL = window.location.origin; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω, —á—Ç–æ –∏ Mini App
const REFRESH_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
const API_TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTab = 'about';
let refreshTimer = null;
let isLoading = false;

// –ú–∞–ø–ø–∏–Ω–≥ –≤–∫–ª–∞–¥–æ–∫ –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
const TAB_API_MAP = {
    'about': null, // Special tab without API
    'analytics': null, // Analytics tab without API  
    'clusterBuy': 'clusterbuy',
    'whaleMoves': 'whalemoves', 
    'volumeSurge': 'volumesurge',
    'coBuy': 'cobuy',
    'smartMoney': 'smartmoney',
    'freshTokens': 'freshtokens',
    'topGainers': 'topgainers'
};

// –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π
const TAB_RENDER_MAP = {
    'about': null, // Special tab without rendering
    'analytics': null, // Analytics tab without rendering
    'clusterBuy': renderClusterBuy,
    'whaleMoves': renderWhaleMoves,
    'volumeSurge': renderVolumeSurge,
    'coBuy': renderCoBuy,
    'smartMoney': renderSmartMoney,
    'freshTokens': renderFreshTokens,
    'topGainers': renderTopGainers
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initTelegramWebApp() {
    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        if (tg.themeParams) {
            document.body.classList.add('telegram-theme');
        }
        
        // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        tg.ready();
        tg.expand();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        tg.MainButton.hide();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        tg.BackButton.hide();
        
        console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('User ID:', tg.initDataUnsafe?.user?.id);
        console.log('Theme params:', tg.themeParams);
        
        return tg;
    }
    console.log('Telegram Web App –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ Telegram)');
    return null;
}

// HTTP –∑–∞–ø—Ä–æ—Å—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function fetchWithTimeout(url, options = {}) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);
    
    try {
        const response = await fetch(url, {
            ...options,
            signal: controller.signal
        });
        clearTimeout(timeoutId);
        return response;
    } catch (error) {
        clearTimeout(timeoutId);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API
async function fetchData(endpoint) {
    try {
        const response = await fetchWithTimeout(`${BACKEND_URL}/api/${endpoint}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            updateApiStatus(true);
            return data.data || [];
        } else {
            throw new Error(data.message || 'API error');
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å ${endpoint}:`, error);
        updateApiStatus(false);
        
        if (error.name === 'AbortError') {
            throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
        }
        
        throw error;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ API
function updateApiStatus(isOnline) {
    const statusElement = document.getElementById('apiStatus');
    if (statusElement) {
        statusElement.textContent = isOnline ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω';
        statusElement.className = `status-indicator ${isOnline ? 'online' : 'offline'}`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function updateLastUpdateTime() {
    const lastUpdateElement = document.getElementById('lastUpdate');
    if (lastUpdateElement) {
        const now = new Date();
        lastUpdateElement.textContent = now.toLocaleTimeString('ru-RU');
    }
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading() {
    isLoading = true;
    const refreshIcon = document.getElementById('refresh-icon');
    if (refreshIcon) {
        refreshIcon.parentElement.classList.add('spinning');
    }
}

// –°–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoading() {
    isLoading = false;
    const loadingOverlay = document.getElementById('loading');
    if (loadingOverlay) {
        loadingOverlay.classList.add('hidden');
    }
    
    const refreshIcon = document.getElementById('refresh-icon');
    if (refreshIcon) {
        refreshIcon.parentElement.classList.remove('spinning');
    }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatNumber(num, decimals = 2) {
    if (num === null || num === undefined) return '0';
    const number = parseFloat(num);
    if (isNaN(number)) return '0';
    
    if (number >= 1000000) {
        return (number / 1000000).toFixed(1) + 'M';
    } else if (number >= 1000) {
        return (number / 1000).toFixed(1) + 'K';
    } else {
        return number.toFixed(decimals);
    }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTime(timestamp) {
    if (!timestamp) return '-';
    const date = new Date(timestamp);
    return date.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤
function shortenAddress(address, startChars = 6, endChars = 4) {
    if (!address) return '';
    if (address.length <= startChars + endChars) return address;
    return `${address.slice(0, startChars)}...${address.slice(-endChars)}`;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Cluster Buy –¥–∞–Ω–Ω—ã—Ö
function renderClusterBuy(data) {
    const container = document.getElementById('clusterBuyData');
    if (!container) return;
    
    if (!data || data.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-fire"></i>
                <h3>–ù–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫</h3>
                <p>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å 3+ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏</p>
            </div>`;
        return;
    }
    
    container.innerHTML = data.map((item, index) => {
        const pumpUrl = `https://pump.fun/coin/${item.token_mint}`;
        const dexUrl = `https://dexscreener.com/solana/${item.token_mint}`;
        const avgBuy = item.total_sol && item.buyers ? (parseFloat(item.total_sol) / parseFloat(item.buyers)).toFixed(2) : '0';
        
        return `
            <div class="data-item">
                <div class="data-header">
                    <div class="data-title">
                        <div class="icon fire-icon">
                            <i class="fas fa-fire"></i>
                        </div>
                        <div>
                            <h3>Hot Token Alert</h3>
                            <div class="token-address">${shortenAddress(item.token_mint)}</div>
                        </div>
                    </div>
                    <div class="rank-badge">#${index + 1}</div>
                </div>
                <div class="item-stats">
                    <div class="stat-item">
                        <div class="stat-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</div>
                        <div class="stat-value positive">${item.buyers || 0}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–û–±—â–∏–π –æ–±—ä–µ–º</div>
                        <div class="stat-value neutral">${formatNumber(item.total_sol)} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–°—Ä–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞</div>
                        <div class="stat-value">${avgBuy} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
                        <div class="stat-value positive">üî• ${item.buyers >= 5 ? '–í—ã—Å–æ–∫–∞—è' : '–†–∞—Å—Ç—É—â–∞—è'}</div>
                    </div>
                </div>
                <div class="item-actions">
                    <a href="${pumpUrl}" target="_blank" class="action-button primary">
                        <i class="fas fa-external-link-alt"></i>
                        Pump.fun
                    </a>
                    <a href="${dexUrl}" target="_blank" class="action-button secondary">
                        <i class="fas fa-chart-line"></i>
                        DexScreener
                    </a>
                    <button class="action-button secondary" onclick="showTokenDetails('${item.token_mint}')">
                        <i class="fas fa-info-circle"></i>
                        –î–µ—Ç–∞–ª–∏
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Whale Moves –¥–∞–Ω–Ω—ã—Ö
function renderWhaleMoves(data) {
    const container = document.getElementById('whaleMovesData');
    if (!container) return;
    
    if (!data || data.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-whale"></i>
                <h3>–ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–π –∫–∏—Ç–æ–≤</h3>
                <p>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫ —Å–≤—ã—à–µ 100 SOL</p>
            </div>`;
        return;
    }
    
    container.innerHTML = data.map((item, index) => {
        const pumpUrl = `https://pump.fun/coin/${item.token_mint}`;
        const txUrl = `https://solscan.io/tx/${item.tx_signature}`;
        const walletUrl = `https://solscan.io/account/${item.wallet}`;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–π–¥–µ—Ä–µ
        const traderName = item.wallet_name || undefined;
        const telegramLink = item.wallet_telegram;
        const twitterLink = item.wallet_twitter;
        
        return `
            <div class="data-item whale-item">
                <h3>
                    <i class="fas fa-whale"></i>
                    ${index + 1}. ${traderName ? traderName : '–ö–∏—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞'}
                    ${telegramLink ? `<a href="${telegramLink}" target="_blank" class="social-link telegram"><i class="fab fa-telegram"></i></a>` : ''}
                    ${twitterLink ? `<a href="${twitterLink}" target="_blank" class="social-link twitter"><i class="fab fa-twitter"></i></a>` : ''}
                </h3>
                <div class="item-stats">
                    <div class="stat-item">
                        <div class="stat-label">–ö–æ—à–µ–ª–µ–∫</div>
                        <div class="stat-value">${shortenAddress(item.wallet)}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–¢–æ–∫–µ–Ω</div>
                        <div class="stat-value">${shortenAddress(item.token_mint)}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">SOL –ø–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
                        <div class="stat-value positive">${formatNumber(item.sol_spent)}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–í—Ä–µ–º—è</div>
                        <div class="stat-value">${formatTime(item.ts)}</div>
                    </div>
                </div>
                <div class="item-actions">
                    <a href="${pumpUrl}" target="_blank" class="action-button">
                        <i class="fas fa-external-link-alt"></i> Pump.fun
                    </a>
                    <a href="${txUrl}" target="_blank" class="action-button secondary">
                        <i class="fas fa-receipt"></i> –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    </a>
                    <a href="${walletUrl}" target="_blank" class="action-button secondary">
                        <i class="fas fa-wallet"></i> –ö–æ—à–µ–ª–µ–∫
                    </a>
                </div>
            </div>
        `;
    }).join('');
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Volume Surge –¥–∞–Ω–Ω—ã—Ö
function renderVolumeSurge(data) {
    const container = document.getElementById('volumeSurgeData');
    if (!container) return;
    
    if (!data || data.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-chart-line"></i>
                <h3>–ù–µ—Ç –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä–µ–º–∞</h3>
                <p>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—Å–ø–ª–µ—Å–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–±—ä–µ–º–∞</p>
            </div>`;
        return;
    }
    
    container.innerHTML = data.map((item, index) => {
        const pumpUrl = `https://pump.fun/coin/${item.token_mint}`;
        const surgePercentage = parseFloat(item.surge_percentage || 0);
        const surgeClass = surgePercentage > 50 ? 'positive' : 'neutral';
        
        return `
            <div class="data-item surge-item">
                <h3>
                    <i class="fas fa-chart-line"></i>
                    ${index + 1}. ${shortenAddress(item.token_mint)}
                </h3>
                <div class="item-stats">
                    <div class="stat-item">
                        <div class="stat-label">–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º (15–º)</div>
                        <div class="stat-value positive">${formatNumber(item.volume_15m)} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–º</div>
                        <div class="stat-value">${formatNumber(item.volume_previous)} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–†–æ—Å—Ç</div>
                        <div class="stat-value ${surgeClass}">+${formatNumber(surgePercentage, 1)}%</div>
                    </div>
                </div>
                <div class="item-actions">
                    <a href="${pumpUrl}" target="_blank" class="action-button">
                        <i class="fas fa-external-link-alt"></i> Pump.fun
                    </a>
                    <button class="action-button secondary" onclick="showTokenDetails('${item.token_mint}')">
                        <i class="fas fa-info-circle"></i> –î–µ—Ç–∞–ª–∏
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Co-buy –¥–∞–Ω–Ω—ã—Ö
function renderCoBuy(data) {
    const container = document.getElementById('coBuyData');
    if (!container) return;
    
    if (!data || data.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-users"></i>
                <h3>–ù–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫</h3>
                <p>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∏–Ω—É—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–∫—É–ø–∞–µ–º—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</p>
            </div>`;
        return;
    }
    
    container.innerHTML = data.map((item, index) => {
        const pumpUrlA = `https://pump.fun/coin/${item.token_a}`;
        const pumpUrlB = `https://pump.fun/coin/${item.token_b}`;
        
        return `
            <div class="data-item">
                <h3>
                    <i class="fas fa-users"></i>
                    ${index + 1}. –ü–∞—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
                </h3>
                <div class="item-stats">
                    <div class="stat-item">
                        <div class="stat-label">–¢–æ–∫–µ–Ω A</div>
                        <div class="stat-value">${shortenAddress(item.token_a)}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–¢–æ–∫–µ–Ω B</div>
                        <div class="stat-value">${shortenAddress(item.token_b)}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–û–±—â–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏</div>
                        <div class="stat-value positive">${item.common_buyers || 0}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–û–±—â–∏–π –æ–±—ä–µ–º</div>
                        <div class="stat-value neutral">${formatNumber(item.combined_volume)} SOL</div>
                    </div>
                </div>
                <div class="item-actions">
                    <a href="${pumpUrlA}" target="_blank" class="action-button">
                        <i class="fas fa-external-link-alt"></i> –¢–æ–∫–µ–Ω A
                    </a>
                    <a href="${pumpUrlB}" target="_blank" class="action-button secondary">
                        <i class="fas fa-external-link-alt"></i> –¢–æ–∫–µ–Ω B
                    </a>
                </div>
            </div>
        `;
    }).join('');
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Smart Money –¥–∞–Ω–Ω—ã—Ö
function renderSmartMoney(data) {
    const container = document.getElementById('smartMoneyData');
    if (!container) return;
    
    if (!data || data.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-brain"></i>
                <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É–º–Ω—ã—Ö –¥–µ–Ω–µ–≥</h3>
                <p>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤</p>
            </div>`;
        return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
    const walletGroups = data.reduce((groups, item) => {
        if (!groups[item.wallet]) {
            groups[item.wallet] = {
                wallet: item.wallet,
                unique_tokens: item.unique_tokens,
                avg_buy_size: item.avg_buy_size,
                trades: []
            };
        }
        groups[item.wallet].trades.push(item);
        return groups;
    }, {});
    
    container.innerHTML = Object.values(walletGroups).map((walletData, index) => {
        const walletUrl = `https://solscan.io/account/${walletData.wallet}`;
        const latestTrade = walletData.trades[0]; // –ü–µ—Ä–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è (—Å–∞–º–∞—è —Å–≤–µ–∂–∞—è)
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–π–¥–µ—Ä–µ –∏–∑ latest trade
        const traderName = latestTrade.wallet_name || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä';
        const telegramLink = latestTrade.wallet_telegram;
        const twitterLink = latestTrade.wallet_twitter;
        
        return `
            <div class="data-item smart-item">
                <h3>
                    <i class="fas fa-brain"></i>
                    ${index + 1}. ${traderName}
                    ${telegramLink ? `<a href="${telegramLink}" target="_blank" class="social-link telegram"><i class="fab fa-telegram"></i></a>` : ''}
                    ${twitterLink ? `<a href="${twitterLink}" target="_blank" class="social-link twitter"><i class="fab fa-twitter"></i></a>` : ''}
                </h3>
                <div class="item-stats">
                    <div class="stat-item">
                        <div class="stat-label">–ö–æ—à–µ–ª–µ–∫</div>
                        <div class="stat-value">${shortenAddress(walletData.wallet)}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</div>
                        <div class="stat-value positive">${walletData.unique_tokens || 0}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä</div>
                        <div class="stat-value neutral">${formatNumber(walletData.avg_buy_size)} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω</div>
                        <div class="stat-value">${shortenAddress(latestTrade.token_mint)}</div>
                    </div>
                </div>
                <div class="item-actions">
                    <a href="https://pump.fun/coin/${latestTrade.token_mint}" target="_blank" class="action-button">
                        <i class="fas fa-external-link-alt"></i> –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω
                    </a>
                    <a href="${walletUrl}" target="_blank" class="action-button secondary">
                        <i class="fas fa-wallet"></i> –ö–æ—à–µ–ª–µ–∫
                    </a>
                    <button class="action-button secondary" onclick="showTokenDetails('${latestTrade.token_mint}')">
                        <i class="fas fa-info-circle"></i> –î–µ—Ç–∞–ª–∏
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Fresh Tokens –¥–∞–Ω–Ω—ã—Ö
function renderFreshTokens(data) {
    const container = document.getElementById('freshTokensData');
    if (!container) return;
    
    if (!data || data.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-seedling"></i>
                <h3>–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</h3>
                <p>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é</p>
            </div>`;
        return;
    }
    
    container.innerHTML = data.map((item, index) => {
        const pumpUrl = `https://pump.fun/coin/${item.token_mint}`;
        const timeSinceCreation = new Date() - new Date(item.first_seen);
        const minutesAgo = Math.floor(timeSinceCreation / (1000 * 60));
        
        return `
            <div class="data-item fresh-item">
                <h3>
                    <i class="fas fa-seedling"></i>
                    ${index + 1}. ${shortenAddress(item.token_mint)}
                </h3>
                <div class="item-stats">
                    <div class="stat-item">
                        <div class="stat-label">–†–∞–Ω–Ω–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</div>
                        <div class="stat-value positive">${item.early_buyers || 0}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–û–±—â–∏–π –æ–±—ä–µ–º</div>
                        <div class="stat-value neutral">${formatNumber(item.total_volume)} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–í–æ–∑—Ä–∞—Å—Ç</div>
                        <div class="stat-value">${minutesAgo}–º –Ω–∞–∑–∞–¥</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–°–æ–∑–¥–∞–Ω</div>
                        <div class="stat-value">${formatTime(item.first_seen)}</div>
                    </div>
                </div>
                <div class="item-actions">
                    <a href="${pumpUrl}" target="_blank" class="action-button">
                        <i class="fas fa-external-link-alt"></i> Pump.fun
                    </a>
                    <button class="action-button secondary" onclick="showTokenDetails('${item.token_mint}')">
                        <i class="fas fa-info-circle"></i> –î–µ—Ç–∞–ª–∏
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Top Gainers –¥–∞–Ω–Ω—ã—Ö
function renderTopGainers(data) {
    const container = document.getElementById('topGainersData');
    if (!container) return;
    
    if (!data || data.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-trophy"></i>
                <h3>–ù–µ—Ç –ª–∏–¥–µ—Ä–æ–≤</h3>
                <p>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã —Å –æ–±—ä–µ–º–æ–º —Å–≤—ã—à–µ 100 SOL</p>
            </div>`;
        return;
    }
    
    container.innerHTML = data.map((item, index) => {
        const pumpUrl = `https://pump.fun/coin/${item.token_mint}`;
        const dexUrl = `https://dexscreener.com/solana/${item.token_mint}`;
        
        return `
            <div class="data-item">
                <h3>
                    <i class="fas fa-trophy"></i>
                    ${index + 1}. ${shortenAddress(item.token_mint)}
                </h3>
                <div class="item-stats">
                    <div class="stat-item">
                        <div class="stat-label">–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏</div>
                        <div class="stat-value positive">${item.total_buyers || 0}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–û–±—â–∏–π –æ–±—ä–µ–º</div>
                        <div class="stat-value neutral">${formatNumber(item.total_volume)} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–°—Ä–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞</div>
                        <div class="stat-value">${formatNumber(item.avg_buy_size)} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–ö—Ä—É–ø–Ω–µ–π—à–∞—è –ø–æ–∫—É–ø–∫–∞</div>
                        <div class="stat-value positive">${formatNumber(item.largest_buy)} SOL</div>
                    </div>
                </div>
                <div class="item-actions">
                    <a href="${pumpUrl}" target="_blank" class="action-button">
                        <i class="fas fa-external-link-alt"></i> Pump.fun
                    </a>
                    <a href="${dexUrl}" target="_blank" class="action-button secondary">
                        <i class="fas fa-chart-line"></i> DexScreener
                    </a>
                    <button class="action-button secondary" onclick="showTokenDetails('${item.token_mint}')">
                        <i class="fas fa-info-circle"></i> –î–µ—Ç–∞–ª–∏
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–∫–µ–Ω–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
async function showTokenDetails(tokenMint) {
    const modal = document.getElementById('tokenModal');
    const title = document.getElementById('modalTokenTitle');
    const content = document.getElementById('modalTokenContent');
    
    if (!modal || !title || !content) return;
    
    title.textContent = `–î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞: ${shortenAddress(tokenMint)}`;
    content.innerHTML = '<div class="loading-placeholder">Loading token data...</div>';
    
    modal.classList.add('active');
    
    try {
        const tokenData = await fetchData(`token/details/${tokenMint}`);
        
        if (!tokenData || tokenData.length === 0) {
            content.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-info-circle"></i>
                    <h3>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
                    <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞</p>
                </div>`;
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–π
        const buyTrades = tokenData.filter(trade => trade.side === 'BUY');
        const sellTrades = tokenData.filter(trade => trade.side === 'SELL');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalBuyVolume = buyTrades.reduce((sum, trade) => sum + parseFloat(trade.sol_spent || 0), 0);
        const totalSellVolume = sellTrades.reduce((sum, trade) => sum + parseFloat(trade.sol_spent || 0), 0);
        const uniqueBuyers = new Set(buyTrades.map(trade => trade.wallet)).size;
        const uniqueSellers = new Set(sellTrades.map(trade => trade.wallet)).size;
        
        content.innerHTML = `
            <div class="token-stats">
                <div class="stat-item">
                    <div class="stat-label">–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞</div>
                    <div class="stat-value" style="font-size: 0.9rem; word-break: break-all;">${tokenMint}</div>
                </div>
                <div class="item-stats" style="margin: 1rem 0;">
                    <div class="stat-item">
                        <div class="stat-label">–ü–æ–∫—É–ø–∫–∏ (2—á)</div>
                        <div class="stat-value positive">${buyTrades.length}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–ü—Ä–æ–¥–∞–∂–∏ (2—á)</div>
                        <div class="stat-value negative">${sellTrades.length}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–û–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫</div>
                        <div class="stat-value positive">${formatNumber(totalBuyVolume)} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂</div>
                        <div class="stat-value negative">${formatNumber(totalSellVolume)} SOL</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</div>
                        <div class="stat-value">${uniqueBuyers}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–ü—Ä–æ–¥–∞–≤—Ü–æ–≤</div>
                        <div class="stat-value">${uniqueSellers}</div>
                    </div>
                </div>
            </div>
            
            <h4 style="margin-top: 2rem; margin-bottom: 1rem;">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</h4>
            <div style="max-height: 300px; overflow-y: auto;">
                ${tokenData.slice(0, 10).map(trade => `
                    <div class="data-item" style="margin-bottom: 0.5rem; padding: 0.75rem;">
                        <div class="item-stats">
                            <div class="stat-item">
                                <div class="stat-label">–¢–∏–ø</div>
                                <div class="stat-value ${trade.side === 'BUY' ? 'positive' : 'negative'}">${trade.side}</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">–¢—Ä–µ–π–¥–µ—Ä</div>
                                <div class="stat-value">${trade.wallet_name || shortenAddress(trade.wallet)}</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">SOL</div>
                                <div class="stat-value">${formatNumber(trade.sol_spent)}</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">–í—Ä–µ–º—è</div>
                                <div class="stat-value">${formatTime(trade.ts)}</div>
                            </div>
                        </div>
                        <div class="item-actions" style="margin-top: 0.5rem;">
                            <a href="https://solscan.io/tx/${trade.tx_signature}" target="_blank" class="action-button">
                                <i class="fas fa-external-link-alt"></i> TX
                            </a>
                        </div>
                    </div>
                `).join('')}
            </div>`;
            
    } catch (error) {
        content.innerHTML = `
            <div class="error-state">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>${error.message}</p>
                <button onclick="showTokenDetails('${tokenMint}')">
                    <i class="fas fa-redo"></i> –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
            </div>`;
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeTokenModal() {
    const modal = document.getElementById('tokenModal');
    if (modal) {
        modal.classList.remove('active');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
function renderError(containerId, error) {
    const container = document.getElementById(containerId);
    if (!container) return;
    
    container.innerHTML = `
        <div class="error-state">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
            <p>${error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
            <button onclick="loadTabData('${currentTab}')">
                <i class="fas fa-redo"></i> –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
            </button>
        </div>`;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
async function loadTabData(tabName) {
    if (isLoading) return;
    
    const endpoint = TAB_API_MAP[tabName];
    const renderFunction = TAB_RENDER_MAP[tabName];
    const dataContainerId = `${tabName}Data`;
    
    // Special handling for non-API tabs
    if (tabName === 'about' || tabName === 'analytics') {
        hideLoading();
        return;
    }
    
    if (!endpoint || !renderFunction) {
        console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞: ${tabName}`);
        return;
    }
    
    try {
        showLoading();
        
        const data = await fetchData(endpoint);
        renderFunction(data);
        updateLastUpdateTime();
        
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${tabName}:`, error);
        renderError(dataContainerId, error);
    } finally {
        hideLoading();
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
function switchTab(tabName) {
    if (currentTab === tabName || isLoading) return;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
    });
    
    const activeTabButton = document.querySelector(`[data-tab="${tabName}"]`);
    if (activeTabButton) {
        activeTabButton.classList.add('active');
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    const activeTabContent = document.getElementById(tabName);
    if (activeTabContent) {
        activeTabContent.classList.add('active');
    }
    
    currentTab = tabName;
    loadTabData(tabName);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
function refreshCurrentTab() {
    if (!isLoading) {
        loadTabData(currentTab);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
function startAutoRefresh() {
    if (refreshTimer) {
        clearInterval(refreshTimer);
    }
    
    refreshTimer = setInterval(() => {
        if (!isLoading && document.visibilityState === 'visible') {
            loadTabData(currentTab);
        }
    }, REFRESH_INTERVAL);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function stopAutoRefresh() {
    if (refreshTimer) {
        clearInterval(refreshTimer);
        refreshTimer = null;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
async function checkApiHealth() {
    try {
        await fetchData('health');
        updateApiStatus(true);
    } catch (error) {
        updateApiStatus(false);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pump Dex Mini App...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = initTelegramWebApp();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    await checkApiHealth();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-button').forEach(button => {
        button.addEventListener('click', () => {
            const tabName = button.dataset.tab;
            if (tabName) {
                switchTab(tabName);
            }
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    document.getElementById('tokenModal').addEventListener('click', (e) => {
        if (e.target.id === 'tokenModal') {
            closeTokenModal();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            startAutoRefresh();
            loadTabData(currentTab);
        } else {
            stopAutoRefresh();
        }
    });
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    await loadTabData(currentTab);
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    startAutoRefresh();
    
    // –°–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(hideLoading, 500);
    
    console.log('Pump Dex Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
}

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
function animateRefreshButton() {
    const refreshButton = document.querySelector('.refresh-button');
    if (refreshButton) {
        refreshButton.style.transform = 'rotate(360deg) translateY(-2px)';
        setTimeout(() => {
            refreshButton.style.transform = 'translateY(-2px)';
        }, 600);
    }
}

function animateCards() {
    const cards = document.querySelectorAll('.data-item');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        setTimeout(() => {
            card.style.transition = 'all 0.4s ease-out';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
function refreshCurrentTab() {
    if (!isLoading) {
        animateRefreshButton();
        loadTabData(currentTab);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    if (currentTab === tabName || isLoading) return;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
    });
    
    const activeTabButton = document.querySelector(`[data-tab="${tabName}"]`);
    if (activeTabButton) {
        activeTabButton.classList.add('active');
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    const activeTabContent = document.getElementById(tabName);
    if (activeTabContent) {
        activeTabContent.classList.add('active');
    }
    
    currentTab = tabName;
    loadTabData(tabName).then(() => {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        setTimeout(animateCards, 100);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è refresh –∫–Ω–æ–ø–∫–∏
function setupRefreshButtonHandler() {
    const refreshButton = document.querySelector('.refresh-button');
    if (refreshButton) {
        refreshButton.addEventListener('click', () => {
            refreshCurrentTab();
        });
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pump Dex Mini App...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = initTelegramWebApp();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    await checkApiHealth();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-button').forEach(button => {
        button.addEventListener('click', () => {
            const tabName = button.dataset.tab;
            if (tabName) {
                switchTab(tabName);
            }
        });
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ refresh –∫–Ω–æ–ø–∫–∏
    setupRefreshButtonHandler();
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    const modal = document.getElementById('tokenModal');
    if (modal) {
        modal.addEventListener('click', (e) => {
            if (e.target.id === 'tokenModal') {
                closeTokenModal();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            startAutoRefresh();
            loadTabData(currentTab);
        } else {
            stopAutoRefresh();
        }
    });
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
    initializeTradersScroll();
    
    await loadTabData(currentTab);
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    startAutoRefresh();
    
    // –°–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
        hideLoading();
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        setTimeout(animateCards, 200);
    }, 500);
    
    console.log('‚úÖ Pump Dex Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üì° API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ');
}

// === –ê–ù–ò–ú–ê–¶–ò–Ø –¢–†–ï–ô–î–ï–†–û–í ===
function initializeTradersScroll() {
    const tradersContainer = document.getElementById('tradersScroll');
    if (!tradersContainer) return;
    
    // List of known traders with their symbols
    const traders = [
        { name: "Dave Portnoy", symbol: "üèõÔ∏è", telegram: null, twitter: "https://x.com/stoolpresidente" },
        { name: "dingaling", symbol: "üíé", telegram: null, twitter: "https://x.com/dingalingts" },
        { name: "Levis", symbol: "üöÄ", telegram: "https://t.me/LevisAlpha", twitter: "https://x.com/LevisNFT" },
        { name: "7xNickk", symbol: "‚ö°", telegram: null, twitter: "https://x.com/7xNickk" },
        { name: "Pain", symbol: "ü©∏", telegram: "https://t.me/PainCrypto69", twitter: "https://x.com/PainCrypt0" },
        { name: "Monarch", symbol: "üëë", telegram: "https://t.me/MonarchJournal", twitter: "https://x.com/MonarchBTC" },
        { name: "ShockedJS", symbol: "‚ö°", telegram: "https://t.me/shockedjstrading", twitter: "https://x.com/ShockedJS" },
        { name: "JB", symbol: "üí∞", telegram: null, twitter: "https://x.com/Jeetburner" },
        { name: "unprofitable", symbol: "üìâ", telegram: null, twitter: "https://x.com/exitliquid1ty" },
        { name: "xunle", symbol: "üåô", telegram: null, twitter: "https://x.com/xunle111" },
        { name: "Oura", symbol: "üåÖ", telegram: "https://t.me/OuraEmergencyCalls", twitter: "https://x.com/Oura456" },
        { name: "Lynk", symbol: "üîó", telegram: "https://t.me/lynkscabal", twitter: "https://x.com/lynk0x" },
        { name: "Kadenox", symbol: "‚ö°", telegram: null, twitter: "https://x.com/kadenox" },
        { name: "Insyder", symbol: "üïµÔ∏è", telegram: null, twitter: "https://x.com/insydercrypto" },
        { name: "LilMoonLambo", symbol: "üåô", telegram: null, twitter: "https://x.com/LilMoonLambo" },
        { name: "Phineas.SOL", symbol: "üß™", telegram: "https://t.me/PhineasCabal", twitter: "https://x.com/Phineas_Sol" },
        { name: "Solstice", symbol: "üåÖ", telegram: "https://t.me/solsticesmoonshots", twitter: "https://x.com/The__Solstice" },
        { name: "Hail", symbol: "‚ö°", telegram: null, twitter: "https://x.com/ignHail" },
        { name: "Jeets", symbol: "üí∞", telegram: null, twitter: "https://x.com/ieatjeets" },
        { name: "Groovy", symbol: "üéµ", telegram: null, twitter: "https://x.com/0xGroovy" },
        { name: "big bags bobby", symbol: "üí∞", telegram: null, twitter: "https://x.com/bigbagsbobby" },
        { name: "gr3g", symbol: "üí™", telegram: null, twitter: "https://x.com/gr3gor14n" },
        { name: "Sebastian", symbol: "‚ö°", telegram: null, twitter: "https://x.com/Saint_pablo123" },
        { name: "Enjooyer", symbol: "üçº", telegram: null, twitter: "https://x.com/0xEnjooyer" },
        { name: "Sweep", symbol: "üßπ", telegram: "https://t.me/jsdao", twitter: "https://x.com/0xSweep" },
        { name: "goob", symbol: "ü§°", telegram: "https://t.me/goobscall", twitter: "https://x.com/ifullclipp" },
        { name: "xander", symbol: "‚öîÔ∏è", telegram: "https://t.me/xanderstrenches", twitter: "https://x.com/xandereef" },
        { name: "ozark", symbol: "üèîÔ∏è", telegram: null, twitter: "https://x.com/ohzarke" },
        { name: "Exy", symbol: "üéØ", telegram: null, twitter: "https://x.com/eth_exy" },
        { name: "Unipcs", symbol: "ü¶¥", telegram: null, twitter: "https://x.com/theunipcs" },
        { name: "Leens", symbol: "üë®‚Äçüç≥", telegram: "https://t.me/leenscooks", twitter: "https://x.com/leensx100" },
        { name: "FINN", symbol: "üêï", telegram: null, twitter: "https://x.com/finnbags" },
        { name: "Lectron", symbol: "‚ö°", telegram: null, twitter: "https://x.com/LectronNFT" },
        { name: "Don", symbol: "üé≠", telegram: "https://t.me/dontrenches", twitter: "https://x.com/doncaarbon" },
        { name: "Sizeab1e", symbol: "üìè", telegram: "https://t.me/thetradingcorps", twitter: "https://x.com/sizeab1e" },
        { name: "Flames", symbol: "üî•", telegram: null, twitter: "https://x.com/FlamesOnSol" },
        { name: "oscar", symbol: "üèÜ", telegram: null, twitter: "https://x.com/oscarexitliq" },
        { name: "printer", symbol: "üñ®Ô∏è", telegram: null, twitter: "https://x.com/prxnterr" },
        { name: "Bronsi", symbol: "üç™", telegram: "https://t.me/Bronsisinsiderinfo", twitter: "https://x.com/Bronsicooks" },
        { name: "staticc", symbol: "‚ö°", telegram: null, twitter: "https://x.com/staticctrades" },
        { name: "Zil", symbol: "‚ö°", telegram: "https://t.me/zilcalls", twitter: "https://x.com/zilxbt" },
        { name: "Publix", symbol: "üè™", telegram: null, twitter: "https://x.com/Publixplayz" },
        { name: "Thurston", symbol: "‚ö°", telegram: null, twitter: "https://x.com/itsthurstxn" },
        { name: "Hash", symbol: "üí©", telegram: "https://t.me/HashTrades", twitter: "https://x.com/Hashbergers" },
        { name: "guappy", symbol: "üê†", telegram: null, twitter: "https://x.com/guappy_eth" },
        { name: "bihoz", symbol: "üöÄ", telegram: null, twitter: "https://x.com/bihozNFTs" },
        { name: "Hesi", symbol: "üéØ", telegram: null, twitter: "https://x.com/hesikillaz" },
        { name: "Giann", symbol: "‚ö°", telegram: null, twitter: "https://x.com/Giann2K" },
        { name: "jamessmith", symbol: "üéØ", telegram: null, twitter: "https://x.com/luckedhub" },
        { name: "Ansem", symbol: "üß†", telegram: null, twitter: "https://x.com/blknoiz06" },
        { name: "Michi", symbol: "üéÆ", telegram: null, twitter: "https://x.com/michibets" },
        { name: "evening", symbol: "üåô", telegram: null, twitter: "https://x.com/eveningbtc" },
        { name: "shaka", symbol: "üèùÔ∏è", telegram: "https://t.me/shakasisland", twitter: "https://x.com/solanashaka" },
        { name: "Damian Prosalendis", symbol: "üè¶", telegram: "http://t.me/prosacalls", twitter: "https://x.com/DamianProsa" },
        { name: "Fuzz", symbol: "üéß", telegram: null, twitter: "https://x.com/slfuzz" },
        { name: "JADAWGS", symbol: "üê∂", telegram: null, twitter: "https://x.com/10xJDOG" },
        { name: "nob mini", symbol: "üî∞", telegram: null, twitter: "https://x.com/noobmini_" },
        { name: "aloh", symbol: "üçç", telegram: "https://t.me/alohcooks", twitter: "https://x.com/alohquant" },
        { name: "cxltures", symbol: "üé®", telegram: null, twitter: "https://x.com/cxlturesvz" },
        { name: "Orange", symbol: "üçä", telegram: null, twitter: "https://x.com/OrangeSBS" },
        { name: "Betman", symbol: "ü¶á", telegram: null, twitter: "https://x.com/ImTheBetman" },
        { name: "Collectible", symbol: "üì¶", telegram: null, twitter: "https://x.com/collectible" },
        { name: "Risk", symbol: "‚ö†Ô∏è", telegram: null, twitter: "https://x.com/risk100x" },
        { name: "The Doc", symbol: "ü©∫", telegram: "https://t.me/+9OnlKXERe9hkODBh", twitter: "https://x.com/KayTheDoc" },
        { name: "Putrick", symbol: "üéØ", telegram: "https://t.me/cryptoputro", twitter: "https://x.com/Putrickk" },
        { name: "Mr. Frog", symbol: "üê∏", telegram: null, twitter: "https://x.com/TheMisterFrog" },
        { name: "MoneyMaykah", symbol: "üí∞", telegram: null, twitter: "https://x.com/moneymaykah_" },
        { name: "EvansOfWeb", symbol: "üåê", telegram: null, twitter: "https://x.com/EvansOfWeb3" },
        { name: "Owl", symbol: "ü¶â", telegram: null, twitter: "https://x.com/OwlFN_" },
        { name: "Sebi", symbol: "üé™", telegram: "https://t.me/launchlog", twitter: "https://x.com/limpcritisism" },
        { name: "gambles.sol", symbol: "üé≤", telegram: "https://t.me/launchlog", twitter: "https://x.com/mastern0de3" },
        { name: "Inside Calls", symbol: "üìû", telegram: "http://t.me/callsfromwithin", twitter: "https://x.com/insidecalls" },
        { name: "Laanie", symbol: "üê∞", telegram: "https://t.me/laaniecalls", twitter: "https://x.com/cryptolaanie" },
        { name: "Casino", symbol: "üé∞", telegram: "https://t.me/casino_calls", twitter: "https://x.com/casino616" },
        { name: "Trey", symbol: "üéµ", telegram: "https://t.me/treystele", twitter: "https://x.com/treysocial" },
        { name: "Otta", symbol: "ü¶¶", telegram: "https://t.me/ottabag", twitter: "https://x.com/ottabag" },
        { name: "Fabix", symbol: "‚öóÔ∏è", telegram: "https://t.me/FabixAlpha", twitter: "https://x.com/Fabix_Sol" }
    ];
    
    // –û—á–∏—Å—Ç–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
    tradersContainer.innerHTML = '';
    
    // Create elements for smooth scrolling with better variety
    const totalItems = traders.length * 2; // Only 2 copies for better variety

    traders.forEach((trader, originalIndex) => {
        for (let copy = 0; copy < 2; copy++) {
            const index = originalIndex * 2 + copy;
            const traderElement = createTraderElement(trader, index);
            tradersContainer.appendChild(traderElement);
        }
    });
}

function createTraderElement(trader, index) {
    const div = document.createElement('div');
    div.className = 'trader-item';
    div.style.cssText = `--delay: ${index * 0.3}s; animation-delay: ${index * 0.3}s;`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
    const colors = [
        'linear-gradient(135deg, #4a9eff, #6c5ce7)',
        'linear-gradient(135deg, #6c5ce7, #74b9ff)', 
        'linear-gradient(135deg, #74b9ff, #a29bfe)',
        'linear-gradient(135deg, #a29bfe, #fd79a8)',
        'linear-gradient(135deg, #fd79a8, #fdcb6e)',
        'linear-gradient(135deg, #fdcb6e, #00b894)',
        'linear-gradient(135deg, #00b894, #00cec9)',
        'linear-gradient(135deg, #00cec9, #4a9eff)'
    ];
    
    const colorIndex = index % colors.length;
    
    div.innerHTML = `
        <div class="trader-avatar" style="background: ${colors[colorIndex]}">
            ${trader.symbol}
        </div>
        <div class="trader-info">
            <div class="trader-name">${trader.name}</div>
            <div class="trader-socials">
                ${trader.telegram ? `<a href="${trader.telegram}" target="_blank" class="trader-social-link telegram"><i class="fab fa-telegram"></i></a>` : ''}
                ${trader.twitter ? `<a href="${trader.twitter}" target="_blank" class="trader-social-link twitter"><i class="fab fa-twitter"></i></a>` : ''}
            </div>
        </div>
    `;
    
    return div;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initApp);
} else {
    initApp();
}
